#!/usr/bin/env python3
"""
Script pour lancer le scraper avec les donn√©es d'un utilisateur r√©el depuis la base de donn√©es
"""

import sys
import os
import json
import time
import argparse
import logging
import shutil
import traceback
from datetime import datetime

# Importer le module d'int√©gration de base de donn√©es qui g√®re le chemin racine
try:
    from db_integration import import_user_database
    UserDatabase = import_user_database()
    print("‚úÖ Module UserDatabase import√© avec succ√®s via db_integration")
except ImportError as e:
    print(f"‚ùå Erreur lors de l'importation via db_integration: {e}")
    # Fallback: essai avec le chemin direct
    try:
        # D√©tection dynamique du chemin racine du projet
        base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
        sys.path.insert(0, base_dir)
        print(f"Tentative directe avec r√©pertoire racine: {base_dir}")
        from database.user_database import UserDatabase
        print("‚úÖ Module UserDatabase import√© avec succ√®s via chemin direct")
    except ImportError as e2:
        print(f"‚ùå Toutes les tentatives d'importation ont √©chou√©: {e2}")
        print(f"Chemin Python actuel: {sys.path}")
        sys.exit(1)

# Configurer le logger
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/real_user_test.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Ajouter le r√©pertoire attached_assets au chemin Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'attached_assets'))

# Importer le script de scraping
try:
    from alternance_gouv_1751543361694 import run_scraper
    print("‚úÖ Module alternance_gouv import√© avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur lors de l'importation du scraper: {e}")
    sys.exit(1)

def get_user_data(user_id=None, user_email=None):
    """
    R√©cup√®re les donn√©es d'un utilisateur depuis la base de donn√©es
    
    Args:
        user_id: ID de l'utilisateur √† r√©cup√©rer
        user_email: Email de l'utilisateur √† r√©cup√©rer (si None et user_id None, prend le dernier utilisateur)
        
    Returns:
        dict: Les donn√©es utilisateur format√©es pour le scraper
    """
    try:
        # Cr√©er une instance de UserDatabase
        user_db = UserDatabase()
        print("‚úÖ Connexion √† la base de donn√©es √©tablie")
        
        # R√©cup√©rer l'utilisateur
        if user_id:
            query = "SELECT * FROM users WHERE id = %s"
            user = user_db._execute_query(query, (user_id,), fetch='one')
            if not user:
                print(f"‚ùå Aucun utilisateur trouv√© avec l'ID {user_id}")
                return None
        elif user_email:
            query = "SELECT * FROM users WHERE email = %s"
            user = user_db._execute_query(query, (user_email,), fetch='one')
            if not user:
                print(f"‚ùå Aucun utilisateur trouv√© avec l'email {user_email}")
                return None
        else:
            # R√©cup√©rer le dernier utilisateur inscrit
            query = "SELECT * FROM users ORDER BY id DESC LIMIT 1"
            user = user_db._execute_query(query, fetch='one')
            if not user:
                print("‚ùå Aucun utilisateur trouv√© dans la base de donn√©es")
                return None
        
        print(f"‚úÖ Utilisateur r√©cup√©r√©: {user['email']}")
        
        # Afficher les pr√©f√©rences de recherche directement depuis les colonnes
        search_query = user.get('search_query', '')
        location = user.get('location', '')
        contract_type = user.get('contract_type', 'Alternance')
        
        if search_query:
            print(f"‚úÖ M√©tier recherch√©: {search_query}")
        else:
            print("‚ö†Ô∏è Aucun m√©tier recherch√© sp√©cifi√©")
            
        if location:
            print(f"‚úÖ Localisation: {location}")
        else:
            print("‚ö†Ô∏è Aucune localisation sp√©cifi√©e")
        
        # V√©rification obligatoire du num√©ro de t√©l√©phone
        if not user.get('phone'):
            print("‚ùå ERREUR: Aucun num√©ro de t√©l√©phone trouv√© pour cet utilisateur")
            print("Le t√©l√©phone est obligatoire pour les candidatures. Veuillez mettre √† jour le profil utilisateur.")
            return None
            
        # R√©cup√©rer le num√©ro de t√©l√©phone de l'utilisateur (sans valeur par d√©faut)
        phone_value = user.get('phone')
        
        user_data = {
            "email": user['email'],
            "firstName": user['first_name'],  # Utilise first_name comme dans la BDD
            "lastName": user['last_name'],   # Utilise last_name comme dans la BDD
            "phone": phone_value,            # Champ utilis√© par le scraper
            "telephone": phone_value,         # Ajout d'un alias pour compatibilit√© avec d'autres parties du code
            "phoneNumber": phone_value,       # Autre alias possible - obligatoire d'avoir une valeur
            "cv_path": user.get('cv_path', ''),  # Chemin du CV
            "lm_path": user.get('lm_path', ''),  # Chemin de la lettre de motivation
            "message": "Je suis int√©ress√©(e) par cette offre d'alternance et souhaite postuler.",
            "search_query": search_query or "d√©veloppeur",  # M√©tier recherch√© - champ 'metier' sur le site
            "location": location or "Paris",  # Localisation - champ 'lieu' sur le site
            "contractType": contract_type,  # Type de contrat (Alternance par d√©faut)
            "settings": {
                "delayBetweenApplications": 5,
                "maxApplicationsPerSession": 2,
                "autoFillForm": True,
                "autoSendApplication": True,
                "pauseBeforeSend": True,  # Pause avant envoi pour v√©rification
                "captureScreenshots": True
            }
        }
        
        print(f"‚úÖ Donn√©es utilisateur pr√©par√©es pour: {user_data['firstName']} {user_data['lastName']}")
        print(f"üìß Email: {user_data['email']}")
        print(f"üì± T√©l√©phone: {user_data['phone']}")
        print(f"üìÑ CV: {user_data['cv_path']}")
        print(f"üîç Recherche: {user_data['search_query']} √† {user_data['location']}")
        
        return user_data
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur: {str(e)}")
        traceback.print_exc()
        return None

def setup_directories():
    """Cr√©e les r√©pertoires n√©cessaires s'ils n'existent pas d√©j√†"""
    dirs = ["uploads", "debug_screenshots", "logs"]
    for directory in dirs:
        os.makedirs(directory, exist_ok=True)
    print("üìÅ R√©pertoires cr√©√©s/v√©rifi√©s")

def verify_files_exist(user_data):
    """V√©rifie que les fichiers CV et LM existent et sont accessibles"""
    files_ok = True
    
    # Obtenir le r√©pertoire racine du projet de mani√®re fiable
    # Essayer plusieurs chemins potentiels pour trouver les fichiers
    potential_base_dirs = [
        os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))),  # /Users/davidravin/Desktop/Api_Final
        os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))),  # Un niveau plus haut si n√©cessaire
    ]
    
    # V√©rifier le CV
    if user_data.get('cv_path'):
        cv_path = user_data['cv_path']
        cv_found = False
        
        # Essayer tous les chemins base potentiels
        for base_dir in potential_base_dirs:
            if not os.path.isabs(cv_path):
                full_path = os.path.join(base_dir, cv_path)
                
                if os.path.exists(full_path):
                    cv_found = True
                    print(f"‚úÖ CV trouv√©: {full_path}")
                    user_data['cv_path'] = full_path  # Mettre √† jour avec le chemin absolu
                    break
        
        if not cv_found:
            # V√©rifier aussi le chemin direct si c'est un chemin absolu ou s'il existe dans le r√©pertoire courant
            if os.path.isabs(cv_path) and os.path.exists(cv_path):
                print(f"‚úÖ CV trouv√©: {cv_path}")
                cv_found = True
            else:
                print(f"‚ùå CV introuvable dans les chemins test√©s. Dernier essai: {full_path}")
                # Affichons les r√©pertoires pour debug
                print(f"R√©pertoires test√©s: {potential_base_dirs}")
                files_ok = False
    else:
        print("‚ö†Ô∏è Pas de CV d√©fini pour cet utilisateur")
        files_ok = False
    
    # V√©rifier la lettre de motivation - m√™me logique
    if user_data.get('lm_path'):
        lm_path = user_data['lm_path']
        lm_found = False
        
        # Essayer tous les chemins base potentiels
        for base_dir in potential_base_dirs:
            if not os.path.isabs(lm_path):
                full_path = os.path.join(base_dir, lm_path)
                
                if os.path.exists(full_path):
                    lm_found = True
                    print(f"‚úÖ Lettre de motivation trouv√©e: {full_path}")
                    user_data['lm_path'] = full_path  # Mettre √† jour avec le chemin absolu
                    break
        
        if not lm_found:
            # V√©rifier aussi le chemin direct
            if os.path.isabs(lm_path) and os.path.exists(lm_path):
                print(f"‚úÖ Lettre de motivation trouv√©e: {lm_path}")
                lm_found = True
            else:
                print(f"‚ùå Lettre de motivation introuvable dans les chemins test√©s")
                files_ok = False
    else:
        print("‚ö†Ô∏è Pas de lettre de motivation d√©finie pour cet utilisateur")
    
    return files_ok

def main():
    """Fonction principale du script"""
    print("üöÄ Lancement du test avec un utilisateur r√©el")
    
    # Parser les arguments de ligne de commande
    parser = argparse.ArgumentParser(description="Lance le scraper avec un utilisateur r√©el")
    parser.add_argument('--user_id', type=int, help="ID de l'utilisateur √† utiliser")
    parser.add_argument('--user_email', type=str, help="Email de l'utilisateur √† utiliser")
    args = parser.parse_args()
    
    # Cr√©er les r√©pertoires n√©cessaires
    setup_directories()
    
    # R√©cup√©rer les donn√©es d'un utilisateur sp√©cifique ou du dernier utilisateur
    user_data = get_user_data(args.user_id, args.user_email)
    
    if not user_data:
        print("‚ùå Impossible de continuer sans donn√©es utilisateur")
        return
    
    print("\nüìã R√©sum√© des donn√©es utilisateur:")
    print(json.dumps({k: v for k, v in user_data.items() if k != 'settings'}, indent=2))
    
    # V√©rifier l'existence des fichiers CV et LM
    print("\nüîç V√©rification des fichiers...")
    files_ok = verify_files_exist(user_data)
    
    # Lancer le scraper avec les donn√©es utilisateur r√©cup√©r√©es
    print("\nü§ñ Lancement du scraper...")
    try:
        # Cr√©er une copie des donn√©es pour masquer le mot de passe dans les logs
        safe_user_data = user_data.copy()
        if 'password' in safe_user_data:
            safe_user_data['password'] = '********'
        
        # Log des informations importantes pour le scraper
        logger.info(f"Lancement du scraper avec les donn√©es de {safe_user_data['email']}")
        logger.info(f"M√©tier recherch√©: {safe_user_data['search_query']}")
        logger.info(f"Localisation: {safe_user_data['location']}")
        
        # V√©rifier que les informations essentielles pour le scraper sont disponibles
        if not user_data.get('search_query'):
            print("‚ö†Ô∏è Attention: Aucun m√©tier de recherche sp√©cifi√©. Le formulaire de recherche ne sera pas rempli correctement.")
        
        if not user_data.get('location'):
            print("‚ö†Ô∏è Attention: Aucune localisation sp√©cifi√©e. Le formulaire de recherche ne sera pas rempli correctement.")
        
        # Appeler la fonction run_scraper
        if not files_ok:
            print("‚ö†Ô∏è Attention: Certains fichiers sont manquants. Le scraper peut rencontrer des erreurs.")
            proceed = input("Voulez-vous continuer quand m√™me ? (o/n): ")
            if proceed.lower() != 'o':
                print("Op√©ration annul√©e par l'utilisateur")
                return
        
        # Lancer le scraper
        print("D√©marrage du scraper pour le site alternance.emploi.gouv.fr...")
        run_scraper(user_data)
        
        print("‚úÖ Scraper termin√© avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution du scraper: {str(e)}")
        logger.error(f"Erreur: {str(e)}")
        traceback.print_exc()

if __name__ == "__main__":
    main()
