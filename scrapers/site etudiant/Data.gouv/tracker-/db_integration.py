#!/usr/bin/env python3
"""
Module d'int√©gration avec la base de donn√©es utilisateur pour les scrapers
"""

import os
import sys
import json
import logging
import datetime
import dotenv
from typing import Dict, Any

# Charger les variables d'environnement du fichier .env s'il existe
dotenv_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', '..', '..', '.env')
if os.path.exists(dotenv_path):
    dotenv.load_dotenv(dotenv_path)
    print(f"Variables d'environnement charg√©es depuis {dotenv_path}")

# Correction manuelle des param√®tres PostgreSQL pour utiliser la base existante
os.environ["DB_PORT"] = "5433"  # Port d√©tect√© dans les processus en cours d'ex√©cution
os.environ["DB_NAME"] = "job_search_app"  # Base de donn√©es existante detect√©e

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs', 'db_integration.log')),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Ajouter le chemin du projet principal pour pouvoir importer la classe UserDatabase
# Chemins possibles pour trouver le module database
paths_to_try = [
    os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..', '..')),  # /Users/davidravin/Desktop/Api_Final
    os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..', '..', '..')),  # /Users/davidravin/Desktop
]

for path in paths_to_try:
    if os.path.exists(os.path.join(path, 'database', 'user_database.py')):
        root_path = path
        sys.path.insert(0, root_path)
        logger.info(f"Module UserDatabase trouv√© dans: {root_path}")
        break
else:
    root_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..', '..'))
    sys.path.insert(0, root_path)
    logger.warning(f"Tentative de dernier recours avec: {root_path}")

logger.info(f"Ajout du chemin racine au sys.path: {root_path}")

try:
    from database.user_database import UserDatabase
    logger.info(f"Module UserDatabase import√© avec succ√®s depuis {root_path}")
except ImportError as e:
    logger.error(f"Erreur d'importation du module UserDatabase: {e}")
    logger.error(f"Chemin de recherche Python: {sys.path}")
    raise

class DatabaseIntegration:
    """
    Classe pour l'int√©gration entre la base de donn√©es utilisateur et le scraper
    """
    def __init__(self):
        """Initialise la connexion √† la base de donn√©es."""
        try:
            self.db = UserDatabase()
            logger.info("‚úÖ Connexion √† la base de donn√©es utilisateur √©tablie.")
        except Exception as e:
            logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es : {e}")
            raise

    def close(self):
        """Ferme la connexion √† la base de donn√©es."""
        if hasattr(self, 'db') and self.db:
            self.db.close()
            logger.info("Connexion √† la base de donn√©es ferm√©e.")

    def get_user_preferences(self, user_id: int) -> Dict[str, Any]:
        """
        R√©cup√®re les pr√©f√©rences de l'utilisateur depuis la base de donn√©es
        et les convertit au format attendu par le scraper.
        
        Args:
            user_id (int): ID de l'utilisateur
            
        Returns:
            Dict[str, Any]: Dictionnaire avec les pr√©f√©rences utilisateur pour le scraper
        """
        try:
            # R√©cup√©rer l'utilisateur complet pour avoir toutes les informations
            query = """
            SELECT * FROM users 
            WHERE id = %s
            """
            logger.info(f"Ex√©cution de la requ√™te pour l'utilisateur ID {user_id}...")
            user_data = self.db._execute_query(query, (user_id,), fetch='one')
            
            if not user_data:
                logger.error(f"‚ùå Utilisateur ID {user_id} non trouv√© dans la base de donn√©es.")
                return {}
            
            # Log d√©taill√© pour le d√©bogage (sans le mot de passe)
            safe_user_data = {k: v for k, v in user_data.items() if k != 'hashed_password'}
            logger.info(f"‚úÖ Donn√©es brutes r√©cup√©r√©es pour l'utilisateur ID {user_id}: {safe_user_data}")
            
            # V√©rifier sp√©cifiquement les valeurs de recherche et lieu
            search_query = user_data.get('search_query', '')
            location = user_data.get('location', '')
            logger.info(f"üîç DONN√âES UTILISATEUR: search_query='{search_query}', location='{location}'")
            
            # Convertir les donn√©es au format attendu par le scraper
            scraper_config = {
                "firstName": user_data.get('first_name', ''),
                "lastName": user_data.get('last_name', ''),
                "email": user_data.get('email', ''),
                "search_query": search_query,  # Pour le champ 'm√©tier'
                "location": location,  # Pour le champ 'lieu'
                "contractTypes": user_data.get('contract_type', 'alternance'),
                "cvPath": user_data.get('cv_path', ''),
                "coverLetterPath": user_data.get('lm_path', ''),
                "settings": {
                    "delayBetweenApplications": 5,
                    "maxApplicationsPerSession": 10,
                    "autoFillForm": True,
                    "autoSendApplication": True,
                    "pauseBeforeSend": False,
                    "captureScreenshots": True
                }
            }
            
            # Log des informations r√©cup√©r√©es et format√©es pour le scraper
            logger.info(f"Pr√©f√©rences format√©es: {scraper_config}")
            return scraper_config
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des pr√©f√©rences utilisateur : {e}")
            import traceback
            logger.error(f"D√©tail de l'erreur: {traceback.format_exc()}")
            return {}

    def save_application_results(self, user_id: int, offers: list):
        """
        Sauvegarde les r√©sultats des candidatures pour un utilisateur donn√©
        
        Args:
            user_id (int): ID de l'utilisateur
            offers (list): Liste des offres avec les r√©sultats des candidatures
        """
        # TODO: Impl√©menter la sauvegarde des r√©sultats
        try:
            logger.info(f"Sauvegarde des r√©sultats pour {len(offers)} offres pour l'utilisateur ID {user_id}")
            
            # Pr√©paration des donn√©es √† sauvegarder dans la base
            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # TODO: Ajouter le code pour sauvegarder les r√©sultats dans la base
            
            logger.info(f"‚úÖ R√©sultats sauvegard√©s avec succ√®s pour l'utilisateur ID {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la sauvegarde des r√©sultats: {e}")
            return False
            

def test_integration(user_id, return_data=False):
    """
    Fonction utilitaire pour tester l'int√©gration avec la base de donn√©es
    
    Args:
        user_id (int): ID de l'utilisateur √† tester
        return_data (bool): Si True, retourne les donn√©es utilisateur r√©cup√©r√©es
        
    Returns:
        Dict[str, Any] or None: Donn√©es utilisateur si return_data=True, sinon None
    """
    try:
        print(f"\n==== TEST INTEGRATION POUR UTILISATEUR ID {user_id} ====")
        db_integration = DatabaseIntegration()
        user_data = db_integration.get_user_preferences(user_id)
        
        # Affichage des donn√©es r√©cup√©r√©es
        print(f"\nDonn√©es utilisateur r√©cup√©r√©es:")
        print(f"M√©tier: '{user_data.get('search_query', '')}' (cl√© 'search_query')")
        print(f"Lieu: '{user_data.get('location', '')}' (cl√© 'location')")
        print(f"Pr√©nom: '{user_data.get('firstName', '')}' (cl√© 'firstName')")
        print(f"Nom: '{user_data.get('lastName', '')}' (cl√© 'lastName')")
        print(f"Email: '{user_data.get('email', '')}' (cl√© 'email')")
        print(f"\nDictionnaire complet: {user_data}")
        
        if return_data:
            return user_data
        return None
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'int√©gration: {e}")
        import traceback
        print(traceback.format_exc())
        return None if return_data else False


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Test d'int√©gration avec la base de donn√©es utilisateur")
    parser.add_argument("--user-id", type=int, required=True, help="ID de l'utilisateur √† tester")
    args = parser.parse_args()
    
    test_integration(args.user_id)
