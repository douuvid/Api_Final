"""
France Travail API Client Implementation

This module provides a client for interacting with the France Travail (P√¥le Emploi) API.
"""

import requests
import time
from typing import Optional, Dict, Any, Callable, TypeVar, cast
from functools import wraps
from datetime import datetime, timedelta

# D√©finition du type g√©n√©rique pour les fonctions d√©cor√©es
F = TypeVar('F', bound=Callable[..., Any])


class FranceTravailAPI:
    """Client for the France Travail (P√¥le Emploi) API.
    
    This class provides methods to authenticate and interact with the France Travail API.
    It handles OAuth2 authentication and provides methods to search and retrieve job offers.
    
    Args:
        client_id (str): Your France Travail API client ID
        client_secret (str): Your France Travail API client secret
    """
    
    def __init__(self, client_id: str, client_secret: str):
        """
        Initialise le client API France Travail.
        
        Args:
            client_id: Identifiant client de l'application
            client_secret: Cl√© secr√®te de l'application
        """
        self.client_id = client_id
        self.client_secret = client_secret
        self.access_token = None
        self.token_expiry = None
        self.base_url = "https://api.francetravail.io/partenaire"
        # Nouvelle URL d'authentification
        self.auth_url = "https://entreprise.pole-emploi.fr/connexion/oauth2/access_token?realm=%2Fpartenaire"
        
        # Gestion des limites de taux d'appel
        self._rate_limits = {
            'offres': {
                'limit': 10,  # appels par seconde
                'last_call': 0,
                'calls': []
            },
            'romeo': {
                'limit': 2,
                'last_call': 0,
                'calls': []
            },
            'bonne_boite': {
                'limit': 2,
                'last_call': 0,
                'calls': []
            },
            'soft_skills': {
                'limit': 1,
                'last_call': 0,
                'calls': []
            }
        }
    
    def _rate_limit(self, api_type: str = 'offres') -> Callable[[F], F]:
        """
        D√©coreur pour g√©rer les limites de taux d'appel.
        
        Args:
            api_type: Type d'API ('offres', 'romeo', 'bonne_boite', 'soft_skills')
            
        Returns:
            Le d√©corateur √† appliquer aux m√©thodes de l'API
        """
        def decorator(func: F) -> F:
            @wraps(func)
            def wrapper(self, *args, **kwargs):
                # V√©rifier et attendre si n√©cessaire
                self._check_rate_limit(api_type)
                # Appeler la fonction
                return func(self, *args, **kwargs)
            return cast(F, wrapper)
        return decorator
    
    def _check_rate_limit(self, api_type: str):
        """
        V√©rifie et applique les limites de taux d'appel.
        
        Args:
            api_type: Type d'API ('offres', 'romeo', 'bonne_boite', 'soft_skills')
        """
        if api_type not in self._rate_limits:
            return
            
        now = time.time()
        limit_info = self._rate_limits[api_type]
        
        # Nettoyer les appaux plus vieux qu'une seconde
        limit_info['calls'] = [t for t in limit_info['calls'] if now - t < 1.0]
        
        # Attendre si n√©cessaire
        if len(limit_info['calls']) >= limit_info['limit']:
            # Calculer le temps d'attente n√©cessaire
            oldest_call = limit_info['calls'][0]
            wait_time = 1.0 - (now - oldest_call)
            if wait_time > 0:
                time.sleep(wait_time)
            
            # Nettoyer apr√®s l'attente
            now = time.time()
            limit_info['calls'] = [t for t in limit_info['calls'] if now - t < 1.0]
        
        # Enregistrer l'appel
        limit_info['calls'].append(time.time())
        limit_info['last_call'] = now
    
    def is_token_valid(self) -> bool:
        """V√©rifie si le token est toujours valide."""
        if not self.access_token or not self.token_expiry:
            return False
        return datetime.now() < self.token_expiry - timedelta(seconds=60)  # Marge de s√©curit√© de 60 secondes

    def authenticate(self) -> bool:
        """Authentification √† l'API France Travail avec OAuth2.
        
        Returns:
            bool: True si l'authentification a r√©ussi, False sinon
        """
        # V√©rifier si on a d√©j√† un token valide
        if self.is_token_valid():
            return True
            
        # Pr√©parer les donn√©es d'authentification
        import base64
        
        # Afficher des informations de d√©bogage
        print(f"üîë Client ID: {self.client_id[:5]}...{self.client_id[-5:]}")
        
        # Cr√©er l'en-t√™te d'authentification
        auth_string = f"{self.client_id}:{self.client_secret}"
        auth_bytes = auth_string.encode('ascii')
        base64_bytes = base64.b64encode(auth_bytes)
        base64_auth = base64_bytes.decode('ascii')
        
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': f'Basic {base64_auth}'
        }
        
        # Cr√©er les param√®tres d'authentification avec les scopes de base
        data = {
            'grant_type': 'client_credentials',
            'scope': 'api_offresdemploiv2 o2dsoffre'  # Scopes de base
        }
        
        try:
            # Faire la requ√™te d'authentification
            print(f"üîë Tentative d'authentification avec l'URL: {self.auth_url}")
            print(f"üîë Headers: {headers}")
            print(f"üîë Data: {data}")
            
            response = requests.post(
                self.auth_url,
                headers=headers,
                data=data,
                timeout=10,
                allow_redirects=True
            )
            
            # Analyser la r√©ponse
            if response.status_code == 200:
                data = response.json()
                self.access_token = data.get('access_token')
                expires_in = data.get('expires_in', 3600)  # Par d√©faut 1h
                self.token_expiry = datetime.now() + timedelta(seconds=expires_in)
                print("‚úÖ Authentification r√©ussie")
                return True
            else:
                print(f"‚ùå Erreur d'authentification: {response.status_code}")
                print(f"R√©ponse: {response.text}")
                print(f"Headers de la r√©ponse: {response.headers}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False
        except Exception as e:
            print(f"‚ùå Erreur inattendue: {e}")
            return False
    
    @_rate_limit('offres')
    def search_jobs(self, params: Optional[Dict[str, Any]] = None) -> Optional[Dict]:
        """Search for job offers.
        
        Args:
            params: Optional dictionary containing search parameters.
                - motsCles: Search keywords
                - commune: INSEE city code
                - distance: Search radius in km
                - typeContrat: Contract type (CDI, CDD, etc.)
                - experience: Required experience level
                - qualification: Qualification level
                - secteurActivite: Business sector
                - entrepriseAdaptee: Adapted company (true/false)
                - range: Pagination (e.g., "0-9" for first 10 results)
                
        Returns:
            Optional[Dict]: Dictionary containing search results or None if an error occurred
        """
        if not self.access_token:
            if not self.authenticate():
                return None
        
        url = f"{self.base_url}/offresdemploi/v2/offres/search"
        
        headers = {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        
        try:
            response = requests.get(url, headers=headers, params=params)
            
            if response.status_code in [200, 206]:  # 206 = partial content
                print(f"R√©ponse API (premiers 500 caract√®res): {response.text[:500]}...")  # Debug
                return response.json()
            elif response.status_code == 401:  # Token might be expired
                # Try to reauthenticate and retry once
                if self.authenticate():
                    headers['Authorization'] = f'Bearer {self.access_token}'
                    response = requests.get(url, headers=headers, params=params)
                    if response.status_code in [200, 206]:
                        print(f"R√©ponse API apr√®s r√©authentification: {response.text[:500]}...")  # Debug
                        return response.json()
            
            print(f"Error in job search: {response.status_code}")
            print(f"Headers: {response.headers}")
            print(f"Response: {response.text}")
            return None
                
        except Exception as e:
            print(f"Error during job search: {e}")
            return None
    
    @_rate_limit('offres')
    def get_job_details(self, job_id: str) -> Optional[Dict]:
        """Get details for a specific job offer.
        
        Args:
            job_id: The ID of the job offer to retrieve
            
        Returns:
            Optional[Dict]: Dictionary containing job details or None if an error occurred
        """
        if not self.access_token:
            if not self.authenticate():
                return None
        
        url = f"{self.base_url}/offresdemploi/v2/offres/{job_id}"
        
        headers = {
            'Authorization': f'Bearer {self.access_token}',
            'Accept': 'application/json'
        }
        
        try:
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 401:  # Token might be expired
                # Try to reauthenticate and retry once
                if self.authenticate():
                    headers['Authorization'] = f'Bearer {self.access_token}'
                    response = requests.get(url, headers=headers)
                    if response.status_code == 200:
                        return response.json()
            
            print(f"Error getting job details: {response.status_code}")
            print(response.text)
            return None
                
        except Exception as e:
            print(f"Error getting job details: {e}")
            return None
            
    def _get_common_skills(self, job_type: str) -> dict:
        """Retourne les comp√©tences communes par type de m√©tier"""
        return {
            'developpeur': [
                'programmation', 'algorithmes', 'r√©solution de probl√®mes',
                'travail d\'√©quipe', 'communication', 'autonomie', 'adaptabilit√©',
                'veille technologique', 'anglais technique', 'gestion de version',
                'tests unitaires', 'documentation', 'm√©thodes agiles'
            ],
            'designer': [
                'cr√©ativit√©', 'sens esth√©tique', 'ma√Ætrise des outils graphiques',
                'travail d\'√©quipe', 'communication', 'gestion de projet',
                'veille tendance', 'anglais technique', 'design thinking',
                'prototypage', 'exp√©rience utilisateur (UX)', 'interface utilisateur (UI)'
            ]
        }.get(job_type, [])

    def _simulate_matching(self, rome_code: str, skills: list) -> dict:
        """Simule le matching de comp√©tences localement"""
        # D√©terminer le type de m√©tier bas√© sur le code ROME
        job_type = 'developpeur' if rome_code.startswith('M18') else 'designer'
        common_skills = self._get_common_skills(job_type)
        
        # Nettoyer les comp√©tences en entr√©e
        skills = [s.lower().strip() for s in skills if s.strip()]
        
        # Calculer les correspondances
        matching_skills = [s for s in skills if s in common_skills]
        missing_skills = [s for s in common_skills if s not in skills]
        
        # Calculer un score de matching (entre 0 et 1)
        score = len(matching_skills) / len(common_skills) if common_skills else 0
        
        # G√©n√©rer des recommandations
        recommendations = []
        if missing_skills:
            recommendations.append({
                'skill': missing_skills[0],  # Prendre la premi√®re comp√©tence manquante
                'suggestion': f"Cette comp√©tence est tr√®s demand√©e pour les postes de {job_type}",
                'importance': 'haute'
            })
        
        return {
            'match_score': round(score, 2),
            'matching_skills': matching_skills,
            'missing_skills': missing_skills[:3],
            'recommendations': recommendations,
            'job_type': job_type,
            'status': 'simulation',
            'source': 'local_simulation'
        }

    @_rate_limit('soft_skills')
    def match_soft_skills(self, rome_code: str, skills: list) -> Dict:
        """√âvalue la correspondance entre des comp√©tences et un m√©tier sp√©cifique.
        
        Cette m√©thode tente d'utiliser l'API France Travail, et en cas d'√©chec,
        utilise une simulation locale bas√©e sur des comp√©tences pr√©d√©finies.
        
        Args:
            rome_code: Code ROME du m√©tier cible (ex: 'M1805' pour D√©veloppeur).
            skills: Liste des comp√©tences √† √©valuer.
                
        Returns:
            Un dictionnaire contenant les r√©sultats du matching.
            
        Raises:
            ValueError: Si les param√®tres d'entr√©e sont invalides.
        """
        # Validation des entr√©es
        if not rome_code or not isinstance(rome_code, str) or len(rome_code) != 5 or not rome_code[0].isalpha():
            raise ValueError("Le code ROME doit √™tre une cha√Æne de 5 caract√®res commen√ßant par une lettre (ex: 'M1805')")
            
        if not skills or not isinstance(skills, list) or not all(isinstance(skill, str) and skill.strip() for skill in skills):
            raise ValueError("La liste des comp√©tences doit contenir des cha√Ænes de caract√®res non vides")
        
        # Essayer d'abord avec l'API si on a les cr√©dentiels
        if self.client_id and self.client_secret:
            try:
                # S'assurer qu'on a un token valide
                if not self.is_token_valid() and not self.authenticate():
                    print("‚ö†Ô∏è Impossible de s'authentifier, utilisation de la simulation locale...")
                    return self._simulate_matching(rome_code, skills)
                
                # Pr√©parer l'URL et les en-t√™tes
                url = f"{self.base_url}/match-soft-skills/v1/match"
                headers = {
                    'Authorization': f'Bearer {self.access_token}',
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-API-Version': 'v1'  # Ajout du header de version
                }
                
                # Afficher les informations de d√©bogage
                print(f"üîç En-t√™tes de la requ√™te: {headers}")
                print(f"üîç URL de la requ√™te: {url}")
                
                # Nettoyer et formater les comp√©tences
                cleaned_skills = [s.strip() for s in skills if s.strip()]
                
                # Pr√©parer les donn√©es de la requ√™te
                payload = {
                    'rome_code': rome_code.upper(),
                    'skills': cleaned_skills
                }
                
                print(f"üîç Envoi de la requ√™te √† {url}")
                print(f"üîë Token: {self.access_token[:20]}...")
                print(f"üìÑ Donn√©es: {payload}")
                
                # Faire la requ√™te
                response = requests.post(
                    url,
                    headers=headers,
                    json=payload,
                    timeout=15
                )
                
                # Afficher des informations de d√©bogage
                print(f"üì° Code de statut: {response.status_code}")
                print(f"üìÑ En-t√™tes de r√©ponse: {dict(response.headers)}")
                
                # Traiter la r√©ponse
                if response.status_code == 200:
                    result = response.json()
                    result['source'] = 'france_travail_api'
                    print("‚úÖ R√©sultats obtenus depuis l'API France Travail")
                    return result
                    
                # G√©rer les erreurs connues
                if response.status_code == 401:
                    print("üîí Token expir√© ou invalide, tentative de renouvellement...")
                    if self.authenticate():  # Essayer de se r√©authentifier
                        headers['Authorization'] = f'Bearer {self.access_token}'
                        response = requests.post(
                            url, 
                            headers=headers, 
                            json=payload, 
                            timeout=15
                        )
                        if response.status_code == 200:
                            result = response.json()
                            result['source'] = 'france_travail_api'
                            return result
                
                # Si on arrive ici, il y a eu une erreur
                print(f"‚ö†Ô∏è L'API a retourn√© une erreur {response.status_code}")
                try:
                    error_details = response.json()
                    print(f"üìÑ D√©tails de l'erreur: {error_details}")
                except:
                    print(f"üìÑ R√©ponse brute: {response.text[:500]}...")
                
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è Erreur de connexion √† l'API: {e}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur inattendue lors de l'appel √† l'API: {e}")
                import traceback
                print(f"üìù Stack trace: {traceback.format_exc()}")
        else:
            print("‚ÑπÔ∏è Aucune information d'identification fournie, utilisation de la simulation locale")
        
        # En cas d'√©chec, utiliser la simulation locale
        print("üîÑ Utilisation de la simulation locale...")
        return self._simulate_matching(rome_code, skills)
